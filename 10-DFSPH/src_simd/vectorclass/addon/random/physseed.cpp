/***************************  phusseed.cpp   *********************************
* Author:        Agner Fog
* Date created:  2014-09-09
* Last modified: 2019-08-08
* Version:       2.01
* Project:       add-on package for vector class library
* Description:
* Physical seed generator for random number generator
*
* (c) Copyright 2019 Agner Fog. Apache License version 2.0 or later.
******************************************************************************/

#include "ranvec1.h"

#ifdef VCL_NAMESPACE
namespace VCL_NAMESPACE {
#endif


/******************************************************************************
    Physical seed generation
******************************************************************************/

// Determine the type of physical seed that can be generated by current CPU:
// Return value:
// 0:  No physical seed
// 1:  CPU clock (consecutive calls are not independent)
// 2:  RDRAND instruction
// 3:  RDSEED instruction
int physicalSeedType() {
    int abcd[4];                       // return values from cpuid instruction
    cpuid (abcd, 7);                   // call cpuid function 7
    if (abcd[1] & (1 << 18)) return 3; // ebx bit 18: RDSEED available
    cpuid (abcd, 1);                   // call cpuid function 1
    if (abcd[2] & (1 << 30)) return 2; // ecx bit 30: RDRAND available
    if (abcd[3] & (1 <<  4)) return 1; // edx bit  4: RDTSC available
    return 0;
}

// Get a truly random number based on a physical process.
// The source of randomness is indicated by physicalSeedType();
static int physicalSeedTypei = -1;
int physicalSeed() {
    if (physicalSeedTypei < 0) {       // get the seed type on first call
        physicalSeedTypei = physicalSeedType();
    }
    uint32_t ran = 0;                  // random number
    switch (physicalSeedTypei) {
    case 1:                            // use RDTSC instruction
        ran = (uint32_t)__rdtsc();
        break;
    case 2:                            // use RDRAND instruction
        while (_rdrand32_step(&ran) == 0) {}
        break;
    case 3:                            // use RDSEED instruction
        while (_rdseed32_step(&ran) == 0) {}
        break;
    }
    return (int)ran;                   // return random number
}

#ifdef VCL_NAMESPACE
}
#endif
